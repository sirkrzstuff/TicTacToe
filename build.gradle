// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: "pmd"

defaultTasks 'clean', 'build'

repositories {
  mavenCentral()
  jcenter()
}


jar {
   from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
	manifest {
        attributes 'Implementation-Title': 'ndeploy',
            'Implementation-Version': '0.1.0',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Main-Class': 'main.java.is.ru.fenrir.tictactoe.Tictactoe'
    }
}

dependencies {
  testCompile group: 'junit', name: 'junit-dep', version: '4.10'
  compile 'org.slf4j:slf4j-api:1.7.12'
  testCompile 'junit:junit:4.12'
}

buildscript {
    dependencies {
        classpath fileTree(dir: '../../build/libs', include: '*.jar', excludes: ['*javadoc.jar', '*sources.jar'])
    }
}

run {
    standardInput = System.in
}

pmd { 
	ignoreFailures = true 
}

jacoco {
  toolVersion = "0.7.1.201405082137"
  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacoco {
   applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport) {
   executionData run
   sourceSets sourceSets.main
}

sourceSets {
  main.java.srcDir "TicTacToe Project/src/main/java"
  test.java.srcDir "TicTacToe Project/src/test/java"
}

jacocoTestReport {
      reports {
	    xml.enabled false
	    csv.enabled false
        html.destination "${buildDir}/reports/jacoco"
      }
	  group = "Reporting"
	  description = "Generate Jacoco coverage reports after running tests."
	  additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}


test {
    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "short"

        // set options for log level DEBUG
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}

test {
    jacoco {
       append = false
       destinationFile = file("$buildDir/jacoco/jacocotest.exec")
       classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}



